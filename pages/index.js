import Head from "next/head";

import styles from "../styles/Home.module.css";
import isHotkey from "is-hotkey";
import { Editable, withReact, Slate } from "slate-react";
import { createEditor, Editor } from "slate";
import { withHistory } from "slate-history";
import { useState, useCallback, useMemo } from "react";
import Element from "../components/element";
import Leaf from "../components/leaf";
import MarkButton from "../components/markButton";
import BlockButton from "../components/blockButton";
import { Toolbar } from "../components/comp.js";
import Box from "../components/box";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faBold,
  faGear,
  faItalic,
  faUnderline,
  faAlignCenter,
  faList,
  faListOl,
  faTextHeight,
} from "@fortawesome/free-solid-svg-icons";

const HOTKEYS = {
  "mod+b": "bold",
  "mod+i": "italic",
  "mod+u": "underline",
  "mod+`": "code",
};

// const LIST_TYPES = ["numbered-list", "bulleted-list"];

export default function Home() {
  const [value, setValue] = useState(initialValue);
  const renderElement = useCallback((props) => <Element {...props} />, []);
  const renderLeaf = useCallback((props) => <Leaf {...props} />, []);
  const editor = useMemo(() => withHistory(withReact(createEditor())), []);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.nav}>
        <div className={styles.logo}>
          <img src="/logo.png" />
        </div>
        <div className={styles.data}>Data</div>
        <div style={{ position: "absolute", right: "20px" }}>
          <FontAwesomeIcon className={styles.gear} icon={faGear} />
        </div>
      </div>
      <div className={styles.head}>
        <p>John Doe Interview </p>
      </div>

      <main className={styles.main}>
        <Slate
          editor={editor}
          value={value}
          onChange={(value) => setValue(value)}
        >
          <Toolbar
            style={{ padding: "18px 18px 17px" }}
            className={styles.tool}
          >
            <MarkButton format="bold" icon={faBold} />
            <MarkButton format="italic" icon={faItalic} />
            <MarkButton format="underline" icon={faUnderline} />
            {/* <MarkButton format="code" icon="code" /> */}
            <BlockButton format="heading-one" icon={faTextHeight} />
            {/* <BlockButton format="heading-two" icon="looks_two" /> */}
            <BlockButton format="block-quote" icon={faAlignCenter} />
            <BlockButton format="numbered-list" icon={faListOl} />
            <BlockButton format="bulleted-list" icon={faList} />
            <img src="/Vector1.png" />
            <img src="/Vector2.png" />
            <img src="/Vector3.png" />
            <img src="/Vector4.png" />
            <img src="/Vector5.png" />
          </Toolbar>
          <Editable
            style={{ color: "#344563b2", fontWeight: "500" }}
            renderElement={renderElement}
            renderLeaf={renderLeaf}
            placeholder="Enter some rich textâ€¦"
            spellCheck
            autoFocus
            onKeyDown={(event) => {
              for (const hotkey in HOTKEYS) {
                if (isHotkey(hotkey, event)) {
                  event.preventDefault();
                  const mark = HOTKEYS[hotkey];
                  toggleMark(editor, mark);
                }
              }
            }}
          />
        </Slate>
      </main>
      <Box />
    </div>
  );
}

const isMarkActive = (editor, format) => {
  const marks = Editor.marks(editor);
  return marks ? marks[format] === true : false;
};

const toggleMark = (editor, format) => {
  const isActive = isMarkActive(editor, format);

  if (isActive) {
    Editor.removeMark(editor, format);
  } else {
    Editor.addMark(editor, format, true);
  }
};

const initialValue = [
  {
    type: "paragraph",
    children: [
      {
        text: "There are many variations of Lorem Ipsum but the majority have suffered alteration There are many variationpassages of Lorem Ipsum available, but the majority have salteration in some form, by injected humour, or randomised wowhich don't look even slightly believable. If you are going to use a passage. There are many variations of Lorem Ipsum but the majority have suffered alteration There are many variationpassages of Lorem Ipsum available, but the majority have salteration in some form, by injected humour, or randowowhich don't look even slightly believable. If you are going to use a passage.",
      },
    ],
  },
];
